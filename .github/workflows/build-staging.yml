# This is a basic workflow to help you get started with Actions

name: Build and push the latest build to staging

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_push_image:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Set up Buildx
        # You may pin to the exact commit or the version.
        # uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6
        uses: docker/setup-buildx-action@v2.0.0
        #with:
          # Buildx version. (eg. v0.3.0)
          #version: # optional
          # Sets the builder driver to be used
          #driver: # optional, default is docker-container
          # List of additional driver-specific options. (eg. image=moby/buildkit:master)
          #driver-opts: # optional
          # Flags for buildkitd daemon
          #buildkitd-flags: # optional, default is --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
          # Sets up docker build command as an alias to docker buildx
          #install: # optional, default is false
          # Switch to this builder instance
          #use: # optional, default is true
          # Optional address for docker socket or context from `docker context ls`
          #endpoint: # optional
          # BuildKit config file
          #config: # optional
          # Inline BuildKit config
          #config-inline: # optional      
      - name: Docker Login
        # You may pin to the exact commit or the version.
        # uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
        uses: docker/login-action@v2.0.0
        with:
          # Server address of Docker registry. If not set then will default to Docker Hub
          registry: ${{ secrets.ACR_NAME }}
          # Username used to log against the Docker registry
          username: ${{ secrets.ACR_LOGIN }}
          # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.ACR_PASSWORD }}
          # Specifies whether the given registry is ECR (auto, true or false)
          #ecr: # optional, default is auto
          # Log out from the Docker registry at the end of a job
          #logout: # optional, default is true
          
      - name: Build and push staging images
        # You may pin to the exact commit or the version.
        # uses: docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94
        uses: docker/build-push-action@v3.1.1
        with:
          # List of a customs host-to-IP mapping (e.g., docker:10.180.0.1)
          #add-hosts: # optional
          # List of extra privileged entitlement (e.g., network.host,security.insecure)
          #allow: # optional
          # List of build-time variables
          #build-args: # optional
          # List of additional build contexts (e.g., name=path)
          #build-contexts: # optional
          # Builder instance
          #builder: # optional
          # List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)
          #cache-from: # optional
          # List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)
          #cache-to: # optional
          # Optional parent cgroup for the container used in the build
          #cgroup-parent: # optional
          # Build's context is the set of files located in the specified PATH or URL
          context: .
          # Path to the Dockerfile
          #file: # optional
          # List of metadata for an image
          #labels: # optional
          # Load is a shorthand for --output=type=docker
          #load: # optional, default is false
          # Set the networking mode for the RUN instructions during build
          #network: # optional
          # Do not use cache when building the image
          #no-cache: # optional, default is false
          # Do not cache specified stages
          #no-cache-filters: # optional
          # List of output destinations (format: type=local,dest=path)
          #outputs: # optional
          # List of target platforms for build
          #platforms: # optional
          # Always attempt to pull all referenced images
          #pull: # optional, default is false
          # Push is a shorthand for --output=type=registry
          push: true
          # List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)
          #secrets: # optional
          # List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)
          #secret-files: # optional
          # Size of /dev/shm (e.g., 2g)
          #shm-size: # optional
          # List of SSH agent socket or keys to expose to the build
          #ssh: # optional
          # List of tags
          tags: ${{secrets.ACR_NAME}}/contoso-website:latest
          # Sets the target stage to build
          #target: # optional
          # Ulimit options (e.g., nofile=1024:1024)
          #ulimit: # optional
          # GitHub Token used to authenticate against a repository for Git context
          #github-token: # optional, default is ${{ github.token }}  
  deploy:
    runs-on: ubuntu-20.04
    needs: build_push_image # Will wait for the execution of the previous job        
    
    steps:
      - uses: actions/checkout@v2    
      - name: Install Helm
        uses: Azure/setup-helm@v3.3
        #with:
          # Version of helm
          #version: # default is latest
          # GitHub token. Required only if 'version' == 'latest'
          #token: # optional      
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}       
      - name: Get AKS Credentials
        uses: Azure/aks-set-context@v3
        with:
          # Resource Group Name
          resource-group: mslearn-gh-pipelines-1977
          # AKS Cluster Name
          cluster-name: contoso-video 
          # AKS Cluster Subscription
          subscription: Visual Studio Enterprise Subscription â€“ MPN
          # Get cluster admin credentials. Values: true or false
          #admin: # optional
          # Enables kubelogin for non-admin user scenario. Values: true or false
          #use-kubelogin: # optional          

      - name: Run Helm Deploy
        run: |
          helm upgrade \
            --install \
            --create-namespace \
            --atomic \
            --wait \
            --namespace staging \
            contoso-website \
            ./kubernetes/contoso-website \
            --set image.registry=${{ secrets.ACR_NAME }} \
            --set dns.name=${{ secrets.DNS_NAME }}
        
